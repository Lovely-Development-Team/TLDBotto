name: Docker

on:
  push:
    # Publish `develop` as Docker `latest` image.
    branches:
      - develop
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: tld-botto

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest -vv

      - name: Load docker image from cache
        id: cache-docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-save
          key: docker-save-tld-${{ hashFiles('Dockerfile') }}

      - name: Load cached image into Docker
        run: docker load -i /tmp/docker-save/snapshot.tar || true
        if: steps.cache-docker.outputs.cache-hit == 'true'

      - name: Build docker image
        run: docker build . -t $IMAGE_NAME --cache-from=tld-botto-cache

      - name: Save cache of Docker image
        run: >
          docker tag $IMAGE_NAME tld-botto-cache &&
          mkdir -p /tmp/docker-save &&
          docker save tld-botto-cache -o /tmp/docker-save/snapshot.tar &&
          ls -lh /tmp/docker-save || true
        if: always() && steps.cache-docker.outputs.cache-hit != 'true'

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    concurrency: Tildy

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_run'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load docker image from cache
        id: cache-docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-save
          key: docker-save-tld-${{ hashFiles('Dockerfile') }}

      - name: Load cached image into Docker
        run: docker load -i /tmp/docker-save/snapshot.tar || true
        if: steps.cache-docker.outputs.cache-hit == 'true'

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --cache-from=tld-botto-cache

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/Lovely-Development-Team/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ]  && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    # Ensure test job passes before pushing image.
    needs: push

    concurrency: Tildy
    environment: Primary Kubernetes

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_run'

    permissions:
      contents: read
      packages: read

    steps:
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: service-account
          k8s-url: https://ef264a96-6984-4745-9cd8-dba4192ae195.us-east-1.linodelke.net:443
          k8s-secret: ${{ secrets.DISCORD_BOTS_KUBERNETES_SECRET }}

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set env
        run: echo "RELEASE_VERSION=`git describe --tags`" >> $GITHUB_ENV
        continue-on-error: true

      - name: Set secrets
        uses: azure/k8s-create-secret@v4
        with:
          namespace: 'discord-bots'
          secret-name: 'tildy'
          secret-type: 'Opaque'
          string-data: '{"TLDBOTTO_DISCORD_TOKEN":"${{ secrets.DISCORD_TOKEN }}", "TLDBOTTO_AIRTABLE_BASE": "${{ secrets.AIRTABLE_BASE }}", "TLDBOTTO_AIRTABLE_KEY": "${{ secrets.AIRTABLE_KEY }}", "TLDBOTTO_CLICKUP_TOKEN": "${{ secrets.CLICKUP_TOKEN }}"}'

      - name: Substitute env into templates
        run: |
          cat kubernetes/config.tpl.yaml | envsubst > kubernetes/config.yaml &&
          cat kubernetes/deployment.tpl.yaml | envsubst > kubernetes/deployment.yaml
        env:
          MEMBERS_VOTE_NOT_REQUIRED: ${{ vars.MEMBERS_VOTE_NOT_REQUIRED }}
          TIMEZONES: ${{ vars.TIMEZONES }}
          MEAL_CONFIG: ${{ vars.MEAL_CONFIG }}
          NEXT_DAY_THRESHOLD: ${{ vars.NEXT_DAY_THRESHOLD }}
          DISABLED_FEATURES: ${{ vars.DISABLED_FEATURES }}
          TLDBOTTO_VERSION: ${{ env.RELEASE_VERSION }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

      - name: Deploy to the Kubernetes cluster
        uses: azure/k8s-deploy@v4
        with:
          namespace: discord-bots
          manifests: |
            kubernetes/config.yaml
            kubernetes/deployment.yaml
          images: |
            ghcr.io/lovely-development-team/${{ env.IMAGE_NAME }}:latest